{"code":"import * as tslib_1 from \"tslib\";\r\nimport { StructureTaskInfo, StructureTask } from \"abstract/WorkerTask\";\r\nimport { StructureTaskQueue } from \"utils/taskQueue\";\r\nvar TowerAttackTaskInfo = /** @class */ (function (_super) {\r\n    tslib_1.__extends(TowerAttackTaskInfo, _super);\r\n    function TowerAttackTaskInfo(roomName, hostileID) {\r\n        var _this = _super.call(this, roomName, hostileID) || this;\r\n        _this.name = \"TowerAttack\";\r\n        _this.maxConcurrentCount = 100;\r\n        return _this;\r\n    }\r\n    return TowerAttackTaskInfo;\r\n}(StructureTaskInfo));\r\nexport { TowerAttackTaskInfo };\r\nvar TowerAttack = /** @class */ (function (_super) {\r\n    tslib_1.__extends(TowerAttack, _super);\r\n    function TowerAttack(taskInfo) {\r\n        return _super.call(this, taskInfo) || this;\r\n    }\r\n    TowerAttack.prototype.doWork = function () {\r\n        var info = this.request;\r\n        var hostile = Game.getObjectById(info.targetID);\r\n        // if(site.structureType == \"rampart\")  console.log(\"got a rampart!\");\r\n        var tower = Game.getObjectById(info.assignedTo);\r\n        //console.log(\"Tower: \" + tower.structureType + \" \" + tower.owner)\r\n        if (tower == null || hostile == undefined || hostile.hits == 0) {\r\n            this.request.finished = true;\r\n            return;\r\n        }\r\n        tower.attack(hostile);\r\n    };\r\n    TowerAttack.addTask = function (roomName) {\r\n        var room = Game.rooms[roomName];\r\n        var targets = room.find(FIND_HOSTILE_CREEPS)\r\n            .sort(function (a, b) { return a.hits - b.hits; });\r\n        for (var id in targets) {\r\n            var thing = targets[id];\r\n            var taskInfo = new TowerAttackTaskInfo(roomName, thing.id);\r\n            if (StructureTaskQueue.totalCount(roomName, taskInfo.name) < taskInfo.maxConcurrentCount) {\r\n                StructureTaskQueue.addPending(taskInfo, roomName);\r\n            }\r\n        }\r\n    };\r\n    return TowerAttack;\r\n}(StructureTask));\r\nexport { TowerAttack };\r\n//# sourceMappingURL=TowerAttack.js.map","map":{"version":3,"file":"TowerAttack.js","sourceRoot":"","sources":["../../src/tasks/structure/TowerAttack.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,iBAAiB,EAAE,aAAa,EAAE,MAAM,qBAAqB,CAAC;AACvE,OAAO,EAAE,kBAAkB,EAAE,MAAM,iBAAiB,CAAC;AAErD;IAAyC,+CAAiB;IAGzD,6BAAY,QAAgB,EAAE,SAAiB;QAA/C,YACC,kBAAM,QAAQ,EAAE,SAAS,CAAC,SAC1B;QAJD,UAAI,GAAW,aAAa,CAAC;QAC7B,wBAAkB,GAAW,GAAG,CAAC;;IAGjC,CAAC;IAEF,0BAAC;AAAD,CAAC,AAPD,CAAyC,iBAAiB,GAOzD;;AACD;IAAiC,uCAAa;IAC7C,qBAAY,QAA2B;eACtC,kBAAM,QAAQ,CAAC;IAChB,CAAC;IACS,4BAAM,GAAhB;QAEC,IAAI,IAAI,GAAG,IAAI,CAAC,OAA8B,CAAC;QAC/C,IAAI,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAU,CAAC;QACzD,sEAAsE;QACtE,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,CAAmB,CAAC;QAClE,kEAAkE;QAClE,IAAG,KAAK,IAAI,IAAI,IAAI,OAAO,IAAI,SAAS,IAAI,OAAO,CAAC,IAAI,IAAI,CAAC,EAC7D;YACC,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAA;YAC5B,OAAO;SACP;QACD,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACvB,CAAC;IACM,mBAAO,GAAd,UAAe,QAAgB;QAC9B,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAChC,IAAM,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC;aAC5C,IAAI,CAAC,UAAC,CAAC,EAAC,CAAC,IAAK,OAAA,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,EAAf,CAAe,CAAC,CAAC;QAEjC,KAAK,IAAM,EAAE,IAAI,OAAO,EACxB;YACC,IAAI,KAAK,GAAG,OAAO,CAAC,EAAE,CAAC,CAAC;YACxB,IAAI,QAAQ,GAAG,IAAI,mBAAmB,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;YAC3D,IAAI,kBAAkB,CAAC,UAAU,CAAC,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,kBAAkB,EACxF;gBACC,kBAAkB,CAAC,UAAU,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;aAClD;SACD;IACF,CAAC;IACF,kBAAC;AAAD,CAAC,AAjCD,CAAiC,aAAa,GAiC7C"}}
