{"code":"import * as utils from \"utils/utils\";\r\nimport { RestockTask, RestockTaskDTO } from \"tasks/RestockTask\";\r\nimport { BuildTask, BuildTaskDTO, RepairTask, RepairTaskDTO } from \"tasks/BuildTask\";\r\nimport { UpgradeTask, UpgradeTaskDTO } from \"tasks/UpgradeTask\";\r\nimport { TaskQueue } from \"utils/TaskQueue\";\r\nvar TaskManager = /** @class */ (function () {\r\n    function TaskManager() {\r\n    }\r\n    TaskManager.initializeTaskQueue = function (roomName) {\r\n        var roomMem = Game.rooms[roomName].memory;\r\n        this._workerTasks.clear();\r\n        var taskInfos = roomMem.runningWorkerTasks;\r\n        for (var id in taskInfos) {\r\n            var taskInfo = taskInfos[id];\r\n            if (taskInfo.name == \"Build\") {\r\n                //console.log(\"found an existing build task assigned to \" + taskInfo.assignedCreepName)\r\n                this._workerTasks.addExisting(new BuildTask(taskInfo));\r\n            }\r\n            else if (taskInfo.name == \"Upgrade\") {\r\n                //console.log(\"found an existing upgrade task assigned to \" + taskInfo.assignedCreepName);\r\n                this._workerTasks.addExisting(new UpgradeTask(taskInfo));\r\n            }\r\n            else if (taskInfo.name == \"Restock\") {\r\n                //console.log(\"found an existing restock task assigned to \" + taskInfo.assignedCreepName);\r\n                this._workerTasks.addExisting(new RestockTask(taskInfo));\r\n            }\r\n            else if (taskInfo.name == \"Repair\") {\r\n                //console.log(\"found an existing restock task assigned to \" + taskInfo.assignedCreepName);\r\n                this._workerTasks.addExisting(new RepairTask(taskInfo));\r\n            }\r\n        }\r\n        //_.each(this._currentWorkerTasks, task => this._workerTasks.addTask(task as WorkerTask));\r\n        //console.log(\"TaskManager: taskqueue initialized with \" + this._workerTasks.runningCount() + \" tasks.\")\r\n    };\r\n    TaskManager.processRoomTasks = function (roomName) {\r\n        this.initializeTaskQueue(roomName);\r\n        this.addAllRestockTasks(roomName);\r\n        this.addAllBuildTasks(roomName);\r\n        this.addRepairTask(roomName);\r\n        this.addUpgradeTask(roomName);\r\n        console.log(\"Task count: \" + this._workerTasks.totalCount());\r\n        this.assignWorkerTasks(roomName);\r\n    };\r\n    TaskManager.assignWorkerTasks = function (roomName) {\r\n        var idleCreeps = this.findIdleCreeps(roomName);\r\n        var roomMem = Game.rooms[roomName].memory;\r\n        var creepCounter = 0;\r\n        var pendingTasks = this._workerTasks.waitingCount();\r\n        var existingTasks = this._workerTasks.runningTasks();\r\n        for (var id in existingTasks) {\r\n            var task = existingTasks[id];\r\n            console.log(\"Assigning: \" + task.taskInfo.name + \": \" + task.taskInfo.assignedCreepName);\r\n            var creep = Game.creeps[task.taskInfo.assignedCreepName];\r\n            if (creep == undefined) //could have died\r\n             {\r\n                //console.log(\"creep was undefined.\")\r\n                task.taskInfo.finished = true;\r\n                //console.log(\"task was supposedly fished...\" + this._workerTasks.totalCount());\r\n                this._workerTasks.remove(task);\r\n                roomMem.runningWorkerTasks = roomMem.runningWorkerTasks.filter(function (obj) { return obj != task.taskInfo; });\r\n                //console.log(\"tasklist after removing: \" + this._workerTasks.totalCount())\r\n                return;\r\n            }\r\n            if (task.taskInfo.finished) {\r\n                console.log(\"Finishing: \" + task.taskInfo.name + \": \" + task.taskInfo.assignedCreepName);\r\n                this._workerTasks.remove(task);\r\n                roomMem.runningWorkerTasks = roomMem.runningWorkerTasks.filter(function (obj) { return obj != task.taskInfo; });\r\n                //console.log(\"tasklist after removing: \" + this._workerTasks.totalCount())\r\n                task.finish(creep.id, undefined);\r\n                task.taskInfo.assignedCreepName = \"\";\r\n            }\r\n            else {\r\n                //console.log(\"continuing task.\")\r\n                task.start(creep.id, undefined);\r\n            }\r\n        }\r\n        console.log(\"Found \" + idleCreeps.length + \" idle creeps to assign \" + pendingTasks + \" pending tasks to/\");\r\n        var newTasks = this._workerTasks.waitingTasks();\r\n        for (var id in newTasks) {\r\n            var task = newTasks[id];\r\n            if (idleCreeps.length == creepCounter)\r\n                return;\r\n            var creep = idleCreeps[creepCounter];\r\n            if (creep != undefined) {\r\n                creepCounter++;\r\n                //console.log(`re-assigning task ${task.taskInfo.name} to ${creep.name}`);\r\n                roomMem.runningWorkerTasks.push(task.taskInfo);\r\n                task.continue(creep.id, undefined);\r\n            }\r\n        }\r\n    };\r\n    TaskManager.findIdleCreeps = function (roomName) {\r\n        return Game.rooms[roomName].find(FIND_MY_CREEPS, {\r\n            filter: function (creep) {\r\n                return creep.memory.idle;\r\n            }\r\n        });\r\n    };\r\n    TaskManager.addAllRestockTasks = function (roomName) {\r\n        var restockables = utils.getRestockables(roomName);\r\n        for (var targetID in restockables) {\r\n            var taskInfo = new RestockTaskDTO(roomName, targetID);\r\n            var existingTaskCount = this._workerTasks.existingTaskCount(taskInfo.name);\r\n            var maxConcurrentCount = taskInfo.maxConcurrentCount;\r\n            if (existingTaskCount < maxConcurrentCount) {\r\n                console.log(\"Adding a restock task to worker queue.\");\r\n                this._workerTasks.addNewTask(new RestockTask(taskInfo));\r\n            }\r\n            else {\r\n                //console.log(`Not adding a ${taskInfo.name} task because ${existingTaskCount} >= ${maxConcurrentCount}`)\r\n            }\r\n        }\r\n    };\r\n    TaskManager.addAllBuildTasks = function (roomName) {\r\n        var _this = this;\r\n        var room = Game.rooms[roomName];\r\n        var sites = room.find(FIND_CONSTRUCTION_SITES);\r\n        _.each(sites, function (site) {\r\n            var taskInfo = new BuildTaskDTO(roomName, site.id);\r\n            var existingTaskCount = _this._workerTasks.existingTaskCount(taskInfo.name);\r\n            var maxConcurrentCount = taskInfo.maxConcurrentCount;\r\n            if (site.progressTotal > 0\r\n                && _this._workerTasks.existingTaskCount(taskInfo.name) < taskInfo.maxConcurrentCount) {\r\n                console.log(\"Adding a construction task to worker queue.\");\r\n                _this._workerTasks.addNewTask(new BuildTask(taskInfo));\r\n            }\r\n            else {\r\n                console.log(\"Not adding a \" + taskInfo.name + \" task because \" + existingTaskCount + \" >= \" + maxConcurrentCount);\r\n            }\r\n        });\r\n    };\r\n    TaskManager.addUpgradeTask = function (roomName) {\r\n        var controller = Game.rooms[roomName].controller;\r\n        var taskInfo = new UpgradeTaskDTO(roomName, controller.id);\r\n        //var existingTaskCount = this._workerTasks.existingTaskCount(taskInfo.name)\r\n        //var maxConcurrentCount = taskInfo.maxConcurrentCount;\r\n        if (this._workerTasks.existingTaskCount(taskInfo.name) < taskInfo.maxConcurrentCount) {\r\n            console.log(\"Adding a upgrade task to worker queue.\");\r\n            this._workerTasks.addNewTask(new RestockTask(taskInfo));\r\n        }\r\n        else {\r\n            //console.log(`Not adding a ${taskInfo.name} task because ${existingTaskCount} >= ${maxConcurrentCount}`)\r\n        }\r\n    };\r\n    TaskManager.addRepairTask = function (roomName) {\r\n        var repairables = Game.rooms[roomName].find(FIND_MY_STRUCTURES).filter(function (struct) {\r\n            return struct.hits < 5000;\r\n        });\r\n        for (var id in repairables) {\r\n            var thing = repairables[id];\r\n            var taskInfo = new RepairTaskDTO(roomName, thing.id);\r\n            if (this._workerTasks.existingTaskCount(taskInfo.name) < taskInfo.maxConcurrentCount) {\r\n                console.log(\"Adding a repair task to worker queue.\");\r\n                this._workerTasks.addNewTask(new RepairTask(taskInfo));\r\n            }\r\n        }\r\n        //\r\n        // //var existingTaskCount = this._workerTasks.existingTaskCount(taskInfo.name)\r\n        // //var maxConcurrentCount = taskInfo.maxConcurrentCount;\r\n        // if (this._workerTasks.existingTaskCount(taskInfo.name) < taskInfo.maxConcurrentCount)\r\n        // {\r\n        // \tconsole.log(`Adding a repair task to worker queue.`);\r\n        // \tthis._workerTasks.addNewTask(new RepairTask(taskInfo));\r\n        // }\r\n        // else\r\n        // {\r\n        // \t//console.log(`Not adding a ${taskInfo.name} task because ${existingTaskCount} >= ${maxConcurrentCount}`)\r\n        // }\r\n    };\r\n    TaskManager._workerTasks = new TaskQueue();\r\n    return TaskManager;\r\n}());\r\nexport { TaskManager };\r\n//# sourceMappingURL=taskManager.js.map","map":{"version":3,"file":"taskManager.js","sourceRoot":"","sources":["src/taskManager.ts"],"names":[],"mappings":"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"}}
