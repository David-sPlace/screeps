{"code":"import * as utils from \"utils/utils\";\r\nimport { RestockTask, RestockTaskInfo } from \"tasks/RestockTask\";\r\nimport { BuildTask, BuildTaskInfo, RepairTask } from \"tasks/BuildTask\";\r\nimport { UpgradeTask, UpgradeTaskInfo } from \"tasks/UpgradeTask\";\r\nimport { TaskQueue } from \"utils/TaskQueue\";\r\nvar TaskManager = /** @class */ (function () {\r\n    function TaskManager() {\r\n    }\r\n    TaskManager.processRoomTasks = function (roomName) {\r\n        this._workerTasks = new TaskQueue();\r\n        //_workerTasks.loadTasks(roomName);\r\n        this.addMissingTasks(roomName);\r\n        this.activateTasks(roomName);\r\n        //this.assignWorkerTasks(roomName);\r\n        //this._workerTasks.saveTasks(roomName);\r\n    };\r\n    TaskManager.activateTasks = function (roomName) {\r\n        var idleCreeps = this.findIdleCreeps(roomName);\r\n        //console.log(\"Worker tasks: \" + this._workerTasks)\r\n        // console.log(\"There are \" + idleCreeps.length + \" idle creeps to assign pending tasks to.\");\r\n        for (var id in idleCreeps) {\r\n            var creep = idleCreeps[id];\r\n            //console.log(\"Idle creep: \" + creep.name)\r\n            if (creep != undefined) {\r\n                var mem = creep.memory;\r\n                if (mem.idle) {\r\n                    //console.log(\"found an idle creep...\");\r\n                    this._workerTasks.startNextTask(creep.name, roomName);\r\n                }\r\n            }\r\n        }\r\n        var stillIdleCreeps = this.findIdleCreeps(roomName);\r\n        for (var id in stillIdleCreeps) {\r\n            var creep = stillIdleCreeps[id];\r\n            var m = creep.memory;\r\n            creep.moveTo(Game.getObjectById(m.spawnID));\r\n        }\r\n        var activeTasks = this._workerTasks.allActiveTasks(roomName);\r\n        var roomMem = Game.rooms[roomName].memory;\r\n        roomMem.test = activeTasks;\r\n        // console.log(\"There are now \" + activeTasks + \" active tasks.\")\r\n        for (var assignedName in activeTasks) {\r\n            // console.log(\"Assigned name: \" + assignedName);\r\n            var creep = Game.creeps[assignedName];\r\n            var taskInfo = activeTasks[assignedName];\r\n            switch (taskInfo.name) {\r\n                case \"Restock\":\r\n                    this.processTask(new RestockTask(taskInfo), roomName);\r\n                    break;\r\n                case \"Upgrade\":\r\n                    this.processTask(new UpgradeTask(taskInfo), roomName);\r\n                    break;\r\n                case \"Build\":\r\n                    this.processTask(new BuildTask(taskInfo), roomName);\r\n                    break;\r\n                case \"Repair\":\r\n                    this.processTask(new RepairTask(taskInfo), roomName);\r\n            }\r\n        }\r\n    };\r\n    TaskManager.processTask = function (task, roomName) {\r\n        //this._workerTasks.loadTasks(roomName);\r\n        if (!task.taskInfo.started) {\r\n            task.start();\r\n        }\r\n        if (task.taskInfo.finished) {\r\n            task.finish();\r\n            this._workerTasks.finishTask(task.taskInfo.assignedCreepName, roomName);\r\n        }\r\n        if (task.taskInfo.started) {\r\n            task.continue();\r\n            if (task.taskInfo.finished) {\r\n                task.finish();\r\n                this._workerTasks.finishTask(task.taskInfo.assignedCreepName, roomName);\r\n            }\r\n        }\r\n    };\r\n    TaskManager.addMissingTasks = function (roomName) {\r\n        this.addRestockTasks(roomName);\r\n        this.addUpgradeTasks(roomName);\r\n        this.addBuildTasks(roomName);\r\n        //restock\r\n        //build\r\n        //upgrade\r\n        //repair\r\n    };\r\n    TaskManager.addRestockTasks = function (roomName) {\r\n        var restockables = utils.getRestockables(roomName);\r\n        for (var targetID in restockables) {\r\n            var restockable = restockables[targetID];\r\n            var taskInfo = new RestockTaskInfo(roomName, restockable.id);\r\n            var existingTaskCount = this._workerTasks.pendingCount(roomName, taskInfo.name) + this._workerTasks.activeCount(roomName, taskInfo.name);\r\n            var maxConcurrentCount = taskInfo.maxConcurrentCount;\r\n            // console.log(\"there are \" + existingTaskCount + \" existing restock tasks.\");\r\n            // console.log(\"there are \" + maxConcurrentCount + \" max restock tasks.\");\r\n            if (existingTaskCount < maxConcurrentCount) {\r\n                console.log(\"Adding a restock task to worker queue.\");\r\n                if (taskInfo == undefined) {\r\n                    console.log(\"Restock task was undefined!!\");\r\n                }\r\n                this._workerTasks.addPendingTask(taskInfo, roomName);\r\n            }\r\n        }\r\n    };\r\n    TaskManager.addUpgradeTasks = function (roomName) {\r\n        var controller = Game.rooms[roomName].controller;\r\n        var taskInfo = new UpgradeTaskInfo(roomName, controller.id);\r\n        var existingTaskCount = this._workerTasks.pendingCount(roomName, taskInfo.name) + this._workerTasks.activeCount(roomName, taskInfo.name);\r\n        // console.log(\"there are \" + existingTaskCount + \" existing upgrade tasks.\");\r\n        var maxConcurrentCount = taskInfo.maxConcurrentCount;\r\n        var tasksNeeded = maxConcurrentCount - existingTaskCount;\r\n        //console.log(\"Upgrade tasks needed: \" + tasksNeeded);\r\n        for (var i = 0; i < tasksNeeded; i++) {\r\n            this._workerTasks.addPendingTask(taskInfo, roomName);\r\n        }\r\n    };\r\n    TaskManager.addBuildTasks = function (roomName) {\r\n        var _this = this;\r\n        var room = Game.rooms[roomName];\r\n        var sites = room.find(FIND_CONSTRUCTION_SITES);\r\n        _.each(sites, function (site) {\r\n            var taskInfo = new BuildTaskInfo(roomName, site.id);\r\n            var existingTaskCount = _this._workerTasks.activeCount(roomName, taskInfo.name) +\r\n                _this._workerTasks.pendingCount(roomName, taskInfo.name);\r\n            if (site.progressTotal > 0 && existingTaskCount < taskInfo.maxConcurrentCount) {\r\n                console.log(\"Adding a construction task to worker queue.\");\r\n                _this._workerTasks.addPendingTask(taskInfo, roomName);\r\n            }\r\n            // else\r\n            // {\r\n            // \tconsole.log(`Not adding a ${taskInfo.name} task because ${existingTaskCount} >= ${maxConcurrentCount}`)\r\n            // }\r\n        });\r\n    };\r\n    // private static addUpgradeTask(roomName: string): any\r\n    // {\r\n    // \tvar controller = Game.rooms[roomName].controller as StructureController;\r\n    // \tvar taskInfo = new UpgradeTaskDTO(roomName, controller.id);\r\n    // \t//var existingTaskCount = this._workerTasks.existingTaskCount(taskInfo.name)\r\n    // \t//var maxConcurrentCount = taskInfo.maxConcurrentCount;\r\n    // \tif (this._workerTasks.existingTaskCount(taskInfo.name) < taskInfo.maxConcurrentCount)\r\n    // \t{\r\n    // \t\tconsole.log(`Adding a upgrade task to worker queue.`);\r\n    // \t\tthis._workerTasks.addNewTask(new RestockTask(taskInfo));\r\n    // \t}\r\n    // \telse\r\n    // \t{\r\n    // \t\t//console.log(`Not adding a ${taskInfo.name} task because ${existingTaskCount} >= ${maxConcurrentCount}`)\r\n    // \t}\r\n    // }\r\n    // private static addRepairTask(roomName: string): any\r\n    // {\r\n    // \tvar repairables = Game.rooms[roomName].find(FIND_MY_STRUCTURES).filter(struct =>\r\n    // \t{\r\n    // \t\treturn struct.hits < 5000;\r\n    // \t})\r\n    // \tfor (const id in repairables)\r\n    // \t{\r\n    // \t\tvar thing = repairables[id];\r\n    // \t\tvar taskInfo = new RepairTaskDTO(roomName, thing.id);\r\n    // \t\tif (this._workerTasks.existingTaskCount(taskInfo.name) < taskInfo.maxConcurrentCount)\r\n    // \t\t{\r\n    // \t\t\tconsole.log(`Adding a repair task to worker queue.`);\r\n    // \t\t\tthis._workerTasks.addNewTask(new RepairTask(taskInfo));\r\n    // \t\t}\r\n    // \t}\r\n    // \t//\r\n    // \t// //var existingTaskCount = this._workerTasks.existingTaskCount(taskInfo.name)\r\n    // \t// //var maxConcurrentCount = taskInfo.maxConcurrentCount;\r\n    // \t// if (this._workerTasks.existingTaskCount(taskInfo.name) < taskInfo.maxConcurrentCount)\r\n    // \t// {\r\n    // \t// \tconsole.log(`Adding a repair task to worker queue.`);\r\n    // \t// \tthis._workerTasks.addNewTask(new RepairTask(taskInfo));\r\n    // \t// }\r\n    // \t// else\r\n    // \t// {\r\n    // \t// \t//console.log(`Not adding a ${taskInfo.name} task because ${existingTaskCount} >= ${maxConcurrentCount}`)\r\n    // \t// }\r\n    // }\r\n    TaskManager.findIdleCreeps = function (roomName) {\r\n        return Game.rooms[roomName].find(FIND_MY_CREEPS, {\r\n            filter: function (creep) {\r\n                return creep.memory.idle;\r\n            }\r\n        });\r\n    };\r\n    TaskManager._workerTasks = new TaskQueue();\r\n    return TaskManager;\r\n}());\r\nexport { TaskManager };\r\n//# sourceMappingURL=taskManager.js.map","map":{"version":3,"file":"taskManager.js","sourceRoot":"","sources":["src/taskManager.ts"],"names":[],"mappings":"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"}}
