{"code":"import { CreepManager } from \"CreepFactory\";\r\nimport * as utils from \"utils/utils\";\r\nexport var creeps;\r\nexport var creepCount = 0;\r\nvar RoomManager = /** @class */ (function () {\r\n    function RoomManager() {\r\n        this.creeps = [];\r\n        this.creepCount = 0;\r\n        this.minerCount = 0;\r\n    }\r\n    //taskManager: TaskManager = new TaskManager();\r\n    RoomManager.prototype.Run = function (roomName) {\r\n        RoomManager.loadHarvestingSpots(roomName);\r\n        this.loadCreeps(roomName);\r\n        this.loadStructures(roomName);\r\n        this.spawnMissingMiners(roomName);\r\n        //this.spawnMissingWorkers(roomName);\r\n        //this.spawnMissingUpgraders(roomName);\r\n        //TaskManager.processRoomTasks(roomName);\r\n    };\r\n    RoomManager.prototype.loadCreeps = function (roomName) {\r\n        var room = Game.rooms[roomName];\r\n        creeps = room.find(FIND_MY_CREEPS);\r\n        var spawn = room.find(FIND_MY_SPAWNS)[0];\r\n        creepCount = creeps.length;\r\n        for (var id in creeps) {\r\n            var creep = creeps[id];\r\n            var mem = creep.memory;\r\n            if (mem.alive === undefined || mem.alive == false) {\r\n                var memory = {\r\n                    spawnID: spawn.id,\r\n                    idle: true,\r\n                    alive: true,\r\n                    role: utils.getRole(creep.name),\r\n                    currentTask: \"\",\r\n                };\r\n                creep.memory = memory;\r\n            }\r\n        }\r\n    };\r\n    RoomManager.prototype.loadStructures = function (roomName) {\r\n        var room = Game.rooms[roomName];\r\n        var memory = room.memory;\r\n        if (memory.smartStructures.length == 0) {\r\n            memory.smartStructures = [];\r\n            var structures = room.find(FIND_STRUCTURES);\r\n            var smartStructures = _.filter(structures, function (structure) {\r\n                return (structure.structureType == \"tower\");\r\n            });\r\n            for (var id in smartStructures) {\r\n                var structure = smartStructures[id];\r\n                var newStructureMemory = {\r\n                    idle: true,\r\n                    alive: true,\r\n                    currentTask: \"\"\r\n                };\r\n                var smartStructure = {\r\n                    id: structure.id,\r\n                    memory: newStructureMemory\r\n                };\r\n                memory.smartStructures.push(smartStructure);\r\n            }\r\n        }\r\n    };\r\n    RoomManager.prototype.spawnMissingWorkers = function (roomID) {\r\n        var _this = this;\r\n        var miners = utils.creepCount(roomID, 2 /* ROLE_MINER */);\r\n        var currentWorkerCount = utils.creepCount(roomID, 3 /* ROLE_WORKER */);\r\n        if (miners < RoomManager.minimumMinerCount - 1 && currentWorkerCount > 0) {\r\n            console.log(\"skipping workers for now.\");\r\n            return;\r\n        }\r\n        //console.log(\"miners: \" + miners + \" , workers: \" + currentWorkerCount)\r\n        var spawns = utils.findSpawns(roomID);\r\n        // let currentWorkers = creeps.filter(c =>\r\n        // {\r\n        // \tlet mem = c.memory as CreepMemory;\r\n        // \treturn mem.role == CreepRole.ROLE_WORKER;\r\n        // });\r\n        var workersNeeded = RoomManager.maxWorkersPerRoom - currentWorkerCount;\r\n        if (workersNeeded === 0) {\r\n            console.log(\"no workers needed.\");\r\n            return;\r\n        }\r\n        var workersSpawned = 0;\r\n        _.each(spawns, function (spawn) {\r\n            if (workersSpawned < workersNeeded) {\r\n                var spawner = spawn;\r\n                if (CreepManager.trySpawnCreep(spawner, _this.getWorkerBodyParts(roomID), 3 /* ROLE_WORKER */)) {\r\n                    workersSpawned++;\r\n                }\r\n            }\r\n        });\r\n    };\r\n    RoomManager.prototype.spawnMissingUpgraders = function (roomID) {\r\n        var _this = this;\r\n        var workers = utils.creepCount(roomID, 3 /* ROLE_WORKER */);\r\n        if (workers < RoomManager.minimumWorkerCount + 1)\r\n            return;\r\n        var miners = utils.creepCount(roomID, 2 /* ROLE_MINER */);\r\n        if (miners < RoomManager.minimumMinerCount)\r\n            return;\r\n        var spawns = utils.findSpawns(roomID);\r\n        var currentCount = utils.creepCount(roomID, 4 /* ROLE_UPGRADER */);\r\n        // let currentWorkers = creeps.filter(c =>\r\n        // {\r\n        // \tlet mem = c.memory as CreepMemory;\r\n        // \treturn mem.role == CreepRole.ROLE_WORKER;\r\n        // });\r\n        var needed = RoomManager.maxUpgradersPerRoom - currentCount;\r\n        if (needed === 0)\r\n            return;\r\n        var spawned = 0;\r\n        _.each(spawns, function (spawn) {\r\n            if (spawned < needed) {\r\n                var spawner = spawn;\r\n                if (CreepManager.trySpawnCreep(spawner, _this.getUpgraderBodyParts(roomID), 4 /* ROLE_UPGRADER */)) {\r\n                    spawned++;\r\n                }\r\n            }\r\n        });\r\n    };\r\n    RoomManager.prototype.spawnMissingMiners = function (roomName) {\r\n        var _this = this;\r\n        //console.log(\"spawning miners\")\r\n        var spawns = utils.findSpawns(roomName);\r\n        var currentMiners = creeps.filter(function (c) {\r\n            var mem = c.memory;\r\n            return mem.role == 2 /* ROLE_MINER */;\r\n        });\r\n        var room = Game.rooms[roomName];\r\n        var sources = room.find(FIND_SOURCES);\r\n        this.minerCount = sources.length;\r\n        var minersNeeded = this.minerCount - currentMiners.length;\r\n        // console.log(\"Miners needed: \" + minersNeeded)\r\n        if (minersNeeded === 0)\r\n            return;\r\n        var minersSpawned = 0;\r\n        _.each(spawns, function (spawn) {\r\n            if (minersSpawned < minersNeeded) {\r\n                var spawner = spawn;\r\n                //console.log(\"spawning miner!\")\r\n                if (CreepManager.trySpawnCreep(spawner, _this.getMinerBodyParts(roomName, _this.getRoomEnergyLevel(roomName)), 2 /* ROLE_MINER */)) {\r\n                    minersSpawned++;\r\n                }\r\n            }\r\n        });\r\n    };\r\n    RoomManager.prototype.getWorkerBodyParts = function (roomID) {\r\n        var energyLevel = this.getRoomEnergyLevel(roomID);\r\n        var room = Game.rooms[roomID];\r\n        var currentEnergy = room.energyAvailable;\r\n        //if we run out of creeps for any reason, this will keep us respawning automatically.\r\n        if (creeps.length < 3 && currentEnergy < 800)\r\n            energyLevel = 1;\r\n        //console.log(\"Room energy level: \" + energyLevel)\r\n        switch (energyLevel) {\r\n            case 1: return [WORK, WORK, MOVE, CARRY];\r\n            //case 2: return [WORK, WORK, MOVE, MOVE, CARRY, CARRY];\r\n            case 2: return [WORK, WORK, MOVE, MOVE, CARRY, CARRY];\r\n            //case 3: return [WORK, WORK, WORK, WORK, MOVE, MOVE, MOVE, MOVE, CARRY, CARRY, CARRY, CARRY]\r\n            case 3: return [WORK, WORK, WORK, WORK, MOVE, MOVE, MOVE, MOVE, CARRY, CARRY, CARRY, CARRY];\r\n            default: return [WORK, MOVE, MOVE, CARRY];\r\n        }\r\n    };\r\n    RoomManager.prototype.getUpgraderBodyParts = function (roomID) {\r\n        var energyLevel = this.getRoomEnergyLevel(roomID);\r\n        var room = Game.rooms[roomID];\r\n        var currentEnergy = room.energyAvailable;\r\n        //if we run out of creeps for any reason, this will keep us respawning automatically.\r\n        if (creeps.length < 3 && currentEnergy < 800)\r\n            energyLevel = 1;\r\n        //console.log(\"Room energy level: \" + energyLevel)\r\n        switch (energyLevel) {\r\n            case 1: return [WORK, WORK, MOVE, CARRY];\r\n            //case 2: return [WORK, WORK, MOVE, MOVE, CARRY, CARRY];\r\n            case 2: return [WORK, WORK, MOVE, MOVE, CARRY, CARRY];\r\n            //case 3: return [WORK, WORK, WORK, WORK, MOVE, MOVE, MOVE, MOVE, CARRY, CARRY, CARRY, CARRY]\r\n            case 3: return [WORK, WORK, WORK, WORK, WORK, MOVE, MOVE, MOVE, MOVE, CARRY, CARRY, CARRY];\r\n            default: return [WORK, MOVE, MOVE, CARRY];\r\n        }\r\n    };\r\n    RoomManager.prototype.getMinerBodyParts = function (roomID, energyLevel) {\r\n        //let energyLevel = this.getRoomEnergyLevel(roomID);\r\n        var room = Game.rooms[roomID];\r\n        var currentEnergy = room.energyAvailable;\r\n        //if we run out of creeps for any reason, this will keep us respawning automatically.\r\n        if (creeps.length < 3 && currentEnergy < 800)\r\n            energyLevel = 1;\r\n        //console.log(\"Room energy level: \" + energyLevel)\r\n        switch (energyLevel) {\r\n            case 1: return [WORK, WORK, MOVE, CARRY];\r\n            //case 2: return [WORK, WORK, MOVE, MOVE, CARRY, CARRY];\r\n            case 2: return [WORK, WORK, WORK, WORK, MOVE, CARRY];\r\n            //case 3: return [WORK, WORK, WORK, WORK, MOVE, MOVE, MOVE, MOVE, CARRY, CARRY, CARRY, CARRY]\r\n            case 3: return [WORK, WORK, WORK, WORK, WORK, WORK, MOVE, MOVE, CARRY, CARRY, CARRY, CARRY];\r\n            default: return [WORK, MOVE, MOVE, CARRY];\r\n        }\r\n    };\r\n    RoomManager.prototype.getRoomEnergyLevel = function (roomID) {\r\n        var room = Game.rooms[roomID];\r\n        var cap = room.energyCapacityAvailable;\r\n        if (cap < 500)\r\n            return 1;\r\n        else if (cap <= 800)\r\n            return 2;\r\n        else\r\n            return 3;\r\n    };\r\n    RoomManager.loadHarvestingSpots = function (roomName) {\r\n        var room = Game.rooms[roomName];\r\n        var roomMemory = room.memory;\r\n        if (roomMemory.harvestLocations.length > 0)\r\n            return;\r\n        var sources = room.find(FIND_SOURCES);\r\n        var spots = [];\r\n        for (var sourceID in sources) {\r\n            var source = sources[sourceID];\r\n            var spot = {\r\n                sourceID: source.id,\r\n                roomName: roomName,\r\n                assignedTo: null,\r\n            };\r\n            spots.push(spot);\r\n            roomMemory.harvestLocations = spots;\r\n        }\r\n        // \tlet sourcePosition = source.pos as RoomPosition;\r\n        // \tlet right = room.getPositionAt(sourcePosition.x + 1, sourcePosition.y);\r\n        // \tif (right != null) possibles.push(new HarvestSpot(source.id, right));\r\n        // \tlet left = room.getPositionAt(sourcePosition.x - 1, sourcePosition.y)\r\n        // \tif (left != null) possibles.push(new HarvestSpot(source.id, left));\r\n        // \tlet top = room.getPositionAt(sourcePosition.x, sourcePosition.y - 1)\r\n        // \tif (top != null) possibles.push(new HarvestSpot(source.id, top));\r\n        // \tlet bot = room.getPositionAt(sourcePosition.x, sourcePosition.y + 1)\r\n        // \tif (bot != null) possibles.push(new HarvestSpot(source.id, bot));\r\n        // \tlet tr = room.getPositionAt(sourcePosition.x + 1, sourcePosition.y - 1)\r\n        // \tif (tr != null) possibles.push(new HarvestSpot(source.id, tr));\r\n        // \tlet tl = room.getPositionAt(sourcePosition.x - 1, sourcePosition.y - 1)\r\n        // \tif (tl != null) possibles.push(new HarvestSpot(source.id, tl));\r\n        // \tlet br = room.getPositionAt(sourcePosition.x + 1, sourcePosition.y + 1)\r\n        // \tif (br != null) possibles.push(new HarvestSpot(source.id, br));\r\n        // \tlet bl = room.getPositionAt(sourcePosition.x - 1, sourcePosition.y + 1)\r\n        // \tif (bl != null) possibles.push(new HarvestSpot(source.id, bl));\r\n        // }\r\n        // for (const id in possibles)\r\n        // {\r\n        // \tlet possible = possibles[id];\r\n        // \tif (possible.pos !== null)\r\n        // \t{\r\n        // \t\tconst found: string = possible.pos.lookFor(LOOK_TERRAIN) as any;\r\n        // \t\tif (found != \"wall\")\r\n        // \t\t{\r\n        // \t\t\tspots.push(possible);\r\n        // \t\t}\r\n        // \t}\r\n        // }\r\n    };\r\n    RoomManager.GetClosestOrAssignedHarvestLocation = function (roomName, creepID, locationID) {\r\n        if (locationID === void 0) { locationID = \"\"; }\r\n        var creep = Game.getObjectById(creepID);\r\n        var room = Game.rooms[roomName];\r\n        var roomMemory = room.memory;\r\n        console.log(\"GetClosest\");\r\n        if (locationID == \"\") {\r\n            locationID = creep.id;\r\n        }\r\n        var locObj = Game.getObjectById(locationID);\r\n        if (roomMemory.harvestLocations == []) {\r\n            console.log(\"this should never happen...\");\r\n            this.loadHarvestingSpots(roomName);\r\n        }\r\n        var harvestingSpots = roomMemory.harvestLocations.filter(function (spot) {\r\n            var source = Game.getObjectById(spot.sourceID);\r\n            return source.energy > 0;\r\n        });\r\n        var assignedSpot = harvestingSpots.filter(function (spot) {\r\n            return spot.assignedTo == creep.name;\r\n        })[0];\r\n        if (assignedSpot !== undefined)\r\n            return assignedSpot;\r\n        else {\r\n            var openSpots = harvestingSpots.filter(function (spot) {\r\n                return spot.assignedTo == null;\r\n            });\r\n            _.sortBy(openSpots, function (spot) {\r\n                var sourceID = spot.sourceID;\r\n                var source = Game.getObjectById(sourceID);\r\n                return locObj.pos.getRangeTo(source);\r\n            }).reverse();\r\n            if (openSpots == undefined)\r\n                return undefined;\r\n            var firstOpen = openSpots[0];\r\n            if (firstOpen == undefined)\r\n                return undefined;\r\n            firstOpen.assignedTo = creep.name;\r\n            return firstOpen;\r\n        }\r\n    };\r\n    RoomManager.minimumWorkerCount = 1;\r\n    RoomManager.minimumMinerCount = 2;\r\n    RoomManager.maxWorkersPerRoom = 2;\r\n    RoomManager.maxUpgradersPerRoom = 5;\r\n    return RoomManager;\r\n}());\r\nexport { RoomManager };\r\n//# sourceMappingURL=RoomManager.js.map","map":{"version":3,"file":"RoomManager.js","sourceRoot":"","sources":["src/RoomManager.ts"],"names":[],"mappings":"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"}}
