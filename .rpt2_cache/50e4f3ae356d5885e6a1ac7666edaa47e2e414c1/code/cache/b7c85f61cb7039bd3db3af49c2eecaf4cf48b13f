{"code":"import { UpgradeTask, CollectTask, BuildTask } from \"tasks/UpgradeTask\";\r\nimport { m, roleToString, HarvestSpot } from \"utils/memory\";\r\nimport { TaskQueue } from \"tasks/taskQueue\";\r\nimport { CreepFactory } from \"CreepFactory\";\r\nexport var creeps;\r\nexport var creepCount = 0;\r\nexport var harvesters = [];\r\nexport var upgraders = [];\r\nvar RoomManager = /** @class */ (function () {\r\n    function RoomManager() {\r\n        this.roomTasks = new TaskQueue();\r\n        this.creeps = [];\r\n        this.creepCount = 0;\r\n        this.maxCreepsPerRoom = 5;\r\n    }\r\n    RoomManager.prototype.redirectIdleCreeps = function (room, idleCreeps) {\r\n        var spawn = this.findStructureSpawns(room)[0];\r\n        for (var _i = 0, idleCreeps_1 = idleCreeps; _i < idleCreeps_1.length; _i++) {\r\n            var creep = idleCreeps_1[_i];\r\n            var mem = creep.memory;\r\n            if (mem.idle) {\r\n                creep.moveTo(spawn);\r\n            }\r\n        }\r\n    };\r\n    RoomManager.loadHarvestingSpots = function (room, roomMemory) {\r\n        if (roomMemory.harvestLocations.length != 0)\r\n            return;\r\n        var sources = room.find(FIND_SOURCES);\r\n        var possibles = [];\r\n        var spots = [];\r\n        for (var sourceID in sources) {\r\n            var source = sources[sourceID];\r\n            var sourcePosition = source.pos;\r\n            var right = room.getPositionAt(sourcePosition.x + 1, sourcePosition.y);\r\n            if (right != null)\r\n                possibles.push(new HarvestSpot(source.id, right));\r\n            var left = room.getPositionAt(sourcePosition.x - 1, sourcePosition.y);\r\n            if (left != null)\r\n                possibles.push(new HarvestSpot(source.id, left));\r\n            var top = room.getPositionAt(sourcePosition.x, sourcePosition.y - 1);\r\n            if (top != null)\r\n                possibles.push(new HarvestSpot(source.id, top));\r\n            var bot = room.getPositionAt(sourcePosition.x, sourcePosition.y + 1);\r\n            if (bot != null)\r\n                possibles.push(new HarvestSpot(source.id, bot));\r\n            var tr = room.getPositionAt(sourcePosition.x + 1, sourcePosition.y - 1);\r\n            if (tr != null)\r\n                possibles.push(new HarvestSpot(source.id, tr));\r\n            var tl = room.getPositionAt(sourcePosition.x - 1, sourcePosition.y - 1);\r\n            if (tl != null)\r\n                possibles.push(new HarvestSpot(source.id, tl));\r\n            var br = room.getPositionAt(sourcePosition.x + 1, sourcePosition.y + 1);\r\n            if (br != null)\r\n                possibles.push(new HarvestSpot(source.id, br));\r\n            var bl = room.getPositionAt(sourcePosition.x - 1, sourcePosition.y + 1);\r\n            if (bl != null)\r\n                possibles.push(new HarvestSpot(source.id, bl));\r\n        }\r\n        for (var id in possibles) {\r\n            var possible = possibles[id];\r\n            if (possible.spot !== null) {\r\n                var found = possible.spot.lookFor(LOOK_TERRAIN);\r\n                if (found != \"wall\") {\r\n                    spots.push(possible);\r\n                }\r\n            }\r\n        }\r\n        roomMemory.harvestLocations = spots;\r\n    };\r\n    RoomManager.GetClosestOpenHarvestingLocation = function (creep) {\r\n        var roomMemory = creep.room.memory;\r\n        if (roomMemory.harvestLocations == []) {\r\n            RoomManager.loadHarvestingSpots(creep.room, roomMemory);\r\n        }\r\n        var harvestingSpots = roomMemory.harvestLocations;\r\n        //console.log(\"Found \" + harvestingSpots.length + \" harvesting spots\")\r\n        _.sortBy(harvestingSpots, function (s) { return creep.pos.getRangeTo(s.spot); });\r\n        // for(var s in harvestingSpots){\r\n        // \tvar t = harvestingSpots[s] as HarvestSpot;\r\n        // \t// console.log(t.assignedTo);\r\n        // \t// console.log(t.sourceID);\r\n        // \tconsole.log(creep.pos.getRangeTo(t.spot.x, t.spot.y));\r\n        // \tconsole.log(t.assignedTo);\r\n        // }\r\n        for (var id in harvestingSpots) {\r\n            var spot = harvestingSpots[id];\r\n            if (spot.assignedTo == null) {\r\n                console.log(\"assigning spot to \" + creep.name);\r\n                spot.assignedTo = creep.name;\r\n                return spot;\r\n            }\r\n            else {\r\n                if (spot.assignedTo == creep.name) {\r\n                    return spot;\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n        // _.sortBy(harvestingSpots, function(spot){\r\n        // \tvar location = spot.spot as RoomPosition;\r\n        // \treturn location.getRangeTo(creep.pos.x, creep.pos.y);\r\n        // });\r\n        // harvestingSpots.sort((a:HarvestSpot, b:HarvestSpot)=> {\r\n        // \tvar rangeA = a.spot.getRangeTo(creep.pos.x, creep.pos.y);\r\n        // \tvar rangeB = b.spot.getRangeTo(creep.pos.x, creep.pos.y);\r\n        // \tif(rangeA > rangeB) return 1;\r\n        // \tif(rangeA < rangeB) return -1;\r\n        // \treturn 0;\r\n        // })\r\n        // let min: number = 100000;\r\n        // let closest: HarvestSpot;\r\n        // for(const id in harvestingSpots){\r\n        // \tvar spot = harvestingSpots[id];\r\n        // \tvar range = spot.spot.getRangeTo(creep.pos.x, creep.pos.y);\r\n        // \tif(range < min) {\r\n        // \t\tmin = range;\r\n        // \t\tclosest = spot;\r\n        // \t}\r\n        // }\r\n        //return RoomManager.GetClosestOpenHarvestingLocation(creep);\r\n    };\r\n    RoomManager.prototype.Run = function (room, roomMemory) {\r\n        RoomManager.loadHarvestingSpots(room, roomMemory);\r\n        this.loadCreeps(room);\r\n        this.loadRoomTasks(room, roomMemory);\r\n        this.spawnMissingCreeps(room);\r\n        this.processRoomTasks(room);\r\n    };\r\n    RoomManager.prototype.loadCreeps = function (room) {\r\n        //console.log(\"loading creeps\");\r\n        creeps = room.find(FIND_MY_CREEPS);\r\n        creepCount = creeps.length;\r\n        //console.log(\"found \" + creepCount + \" creeps in this room.\");\r\n        for (var name_1 in creeps) {\r\n            var creep = creeps[name_1];\r\n            var mem = creep.memory;\r\n            if (mem.name === undefined || mem.name === null) {\r\n                console.log(\"resetting creep from previous revision\");\r\n                var memory = {\r\n                    idle: true,\r\n                    moving: false,\r\n                    building: false,\r\n                    currentTask: \"\",\r\n                    name: name_1,\r\n                    gathering: false,\r\n                    role: 0 /* ROLE_UNASSIGNED */,\r\n                    roleString: roleToString(0 /* ROLE_UNASSIGNED */),\r\n                    isUpgradingController: false\r\n                };\r\n                creep.memory = memory;\r\n            }\r\n        }\r\n    };\r\n    RoomManager.prototype.findStructureSpawns = function (room, onlyNonSpawning) {\r\n        if (onlyNonSpawning === void 0) { onlyNonSpawning = true; }\r\n        return room.find(FIND_MY_STRUCTURES, {\r\n            filter: function (structure) {\r\n                if (structure.structureType == STRUCTURE_SPAWN) {\r\n                    var spawner = structure;\r\n                    return onlyNonSpawning ? spawner.spawning === null : true;\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n    };\r\n    RoomManager.prototype.spawnMissingCreeps = function (room) {\r\n        var spawns = this.findStructureSpawns(room);\r\n        var creepsNeeded = this.maxCreepsPerRoom - creeps.length;\r\n        if (creepsNeeded === 0)\r\n            return;\r\n        var creepsSpawned = 0;\r\n        _.each(spawns, function (spawn) {\r\n            if (creepsSpawned < creepsNeeded) {\r\n                var spawner = spawn;\r\n                if (CreepFactory.trySpawnCreep(spawner, [WORK, MOVE, MOVE, CARRY], 12 /* ROLE_UPGRADER */)) {\r\n                    creepsSpawned++;\r\n                }\r\n            }\r\n        });\r\n    };\r\n    RoomManager.initRoomMemory = function (room) {\r\n        var rm = m().rooms[room.name];\r\n        rm.controllerBeingUpgraded = false;\r\n        rm.harvestLocations = [];\r\n    };\r\n    RoomManager.prototype.processExistingTasks = function (room) {\r\n        var runningTasks = this.roomTasks.workingTasks();\r\n        //console.log(`processing ${runningTasks.length} existing tasks`);\r\n        for (var _i = 0, runningTasks_1 = runningTasks; _i < runningTasks_1.length; _i++) {\r\n            var runningTask = runningTasks_1[_i];\r\n            var task = runningTask;\r\n            var assignedCreepName = task.assignedCreepName;\r\n            creeps = room.find(FIND_MY_CREEPS, {\r\n                filter: function (creep) {\r\n                    return creep.name == assignedCreepName;\r\n                }\r\n            });\r\n            var creep = creeps[0];\r\n            //console.log(\"!!!!found \" + creep.name);\r\n            if (runningTask.finished) {\r\n                runningTask.finish(creep, undefined);\r\n                this.roomTasks.finish(runningTask);\r\n            }\r\n            else {\r\n                runningTask.continue(creep, room);\r\n            }\r\n        }\r\n    };\r\n    RoomManager.prototype.processRoomTasks = function (room) {\r\n        this.processExistingTasks(room);\r\n        if (this.roomTasks.any() == false)\r\n            return;\r\n        var idleCreeps = room.find(FIND_MY_CREEPS, {\r\n            filter: function (creep) {\r\n                var mem = creep.memory;\r\n                return mem.idle;\r\n            }\r\n        });\r\n        // console.log(`Found ${idleCreeps.length} idle creeps.`)\r\n        for (var _i = 0, _a = idleCreeps.sort((function (a, b) {\r\n            if (a.name > b.name)\r\n                return 1;\r\n            if (b.name > a.name)\r\n                return -1;\r\n            return 0;\r\n        })); _i < _a.length; _i++) {\r\n            var creep = _a[_i];\r\n            this.roomTasks.startNext(creep, undefined);\r\n        }\r\n        this.redirectIdleCreeps(room, idleCreeps);\r\n    };\r\n    RoomManager.prototype.loadRestockTasks = function (room) {\r\n        var targets = room.find(FIND_STRUCTURES, {\r\n            filter: function (structure) {\r\n                return (structure.structureType == STRUCTURE_EXTENSION || structure.structureType == STRUCTURE_SPAWN) &&\r\n                    structure.energy < structure.energyCapacity;\r\n            }\r\n        });\r\n        if (targets.length > 0) {\r\n            for (var id in targets) {\r\n                var target = targets[id];\r\n                this.roomTasks.addItem(new CollectTask(room, target), room.name);\r\n            }\r\n        }\r\n    };\r\n    RoomManager.prototype.loadBuildTasks = function (room) {\r\n        var buildSites = room.find(FIND_CONSTRUCTION_SITES);\r\n        if (buildSites.length > 0) {\r\n            for (var id in buildSites) {\r\n                var site = buildSites[id];\r\n                if (site.progressTotal > 0) {\r\n                    this.roomTasks.addItem(new BuildTask(room, site), room.name);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    RoomManager.prototype.loadRoomTasks = function (room, roomMemory) {\r\n        var controller = room.controller;\r\n        if (controller != null) {\r\n            this.roomTasks.addItem(new UpgradeTask(room, controller), room.name);\r\n            this.loadRestockTasks(room);\r\n            this.loadBuildTasks(room);\r\n            // if (controller.ticksToDowngrade < 20000 &&\r\n            // \troomMemory.controllerBeingUpgraded == false)\r\n            // {\r\n            // }\r\n        }\r\n        else {\r\n            console.log(\"room controller was null!\");\r\n        }\r\n        //console.log(`Task count: ${this.roomTasks.length()}`)\r\n    };\r\n    return RoomManager;\r\n}());\r\nexport { RoomManager };\r\n//# sourceMappingURL=RoomManager.js.map","map":{"version":3,"file":"RoomManager.js","sourceRoot":"","sources":["src/RoomManager.ts"],"names":[],"mappings":"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"}}
