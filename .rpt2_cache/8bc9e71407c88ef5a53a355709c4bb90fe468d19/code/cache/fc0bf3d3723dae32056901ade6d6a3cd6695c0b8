{"code":"import * as Utils from \"utils/Utils\";\r\nimport { UpgradeTask } from \"tasks/UpgradeTask\";\r\nimport { m, roleToString } from \"utils/memory\";\r\nimport { TaskQueue } from \"tasks/taskQueue\";\r\nexport var creeps;\r\nexport var creepCount = 0;\r\nexport var harvesters = [];\r\nexport var upgraders = [];\r\nvar RoomManager = /** @class */ (function () {\r\n    function RoomManager() {\r\n        this.roomTasks = new TaskQueue();\r\n        this.creeps = [];\r\n        this.creepCount = 0;\r\n        //harvesters: Array<Creep> = [];\r\n        //builders: Array<Creep> = [];\r\n        this.builders_per_room = 1;\r\n        this.harvesters_per_room = 1;\r\n        this.creeps_per_room = 1;\r\n    }\r\n    RoomManager.initRoomMemory = function (room) {\r\n        var rm = m().rooms[room.name];\r\n        rm.controllerBeingUpgraded = false;\r\n    };\r\n    RoomManager.prototype.processExistingTasks = function (room) {\r\n        var runningTasks = this.roomTasks.workingTasks();\r\n        //console.log(`processing ${runningTasks.length} existing tasks`);\r\n        for (var _i = 0, runningTasks_1 = runningTasks; _i < runningTasks_1.length; _i++) {\r\n            var runningTask = runningTasks_1[_i];\r\n            var task = runningTask;\r\n            var assignedCreepName = task.assignedCreepName;\r\n            creeps = room.find(FIND_MY_CREEPS, {\r\n                filter: function (creep) {\r\n                    return creep.name == assignedCreepName;\r\n                }\r\n            });\r\n            var creep = creeps[0];\r\n            //console.log(\"!!!!found \" + creep.name);\r\n            if (runningTask.finished) {\r\n                runningTask.finish(creep, undefined);\r\n                this.roomTasks.finish(runningTask);\r\n            }\r\n            else {\r\n                runningTask.continue(creep, room);\r\n            }\r\n        }\r\n    };\r\n    RoomManager.prototype.processRoomTasks = function (room) {\r\n        this.processExistingTasks(room);\r\n        if (this.roomTasks.any() == false)\r\n            return;\r\n        var idleCreeps = room.find(FIND_MY_CREEPS, {\r\n            filter: function (creep) {\r\n                var mem = creep.memory;\r\n                return mem.idle;\r\n            }\r\n        });\r\n        // console.log(`Found ${idleCreeps.length} idle creeps.`)\r\n        for (var _i = 0, idleCreeps_1 = idleCreeps; _i < idleCreeps_1.length; _i++) {\r\n            var creep = idleCreeps_1[_i];\r\n            this.roomTasks.startNext(creep, undefined);\r\n        }\r\n    };\r\n    RoomManager.prototype.loadRoomTasks = function (room, roomMemory) {\r\n        var controller = room.controller;\r\n        if (controller != null) {\r\n            if (controller.ticksToDowngrade < 20000 &&\r\n                roomMemory.controllerBeingUpgraded == false) {\r\n                var upgradeTask = new UpgradeTask(room, controller);\r\n                this.roomTasks.addItem(upgradeTask, room.name);\r\n            }\r\n        }\r\n        else {\r\n            console.log(\"room controller was null!\");\r\n        }\r\n        //console.log(`Task count: ${this.roomTasks.length()}`)\r\n    };\r\n    RoomManager.prototype.Run = function (room, roomMemory) {\r\n        this.loadCreeps(room);\r\n        this.loadRoomTasks(room, roomMemory);\r\n        //this.spawnMissingHarvesters(room);\r\n        this.spawnMissingCreeps(room);\r\n        //this.loadCreeps(room);\r\n        //build any missing creeps\r\n        this.processRoomTasks(room);\r\n    };\r\n    RoomManager.prototype.loadCreeps = function (room) {\r\n        //console.log(\"loading creeps\");\r\n        creeps = room.find(FIND_MY_CREEPS);\r\n        creepCount = creeps.length;\r\n        //console.log(\"found \" + creepCount + \" creeps in this room.\");\r\n        for (var name_1 in creeps) {\r\n            var creep = creeps[name_1];\r\n            var mem = creep.memory;\r\n            if (mem.name === undefined || mem.name === null) {\r\n                console.log(\"resetting creep from previous revision\");\r\n                var memory = {\r\n                    idle: true,\r\n                    moving: false,\r\n                    building: false,\r\n                    name: name_1,\r\n                    gathering: false,\r\n                    role: 0 /* ROLE_UNASSIGNED */,\r\n                    roleString: roleToString(0 /* ROLE_UNASSIGNED */),\r\n                    isUpgradingController: false\r\n                };\r\n                creep.memory = memory;\r\n            }\r\n        }\r\n        // harvesters = room.find(FIND_MY_CREEPS, {\r\n        // \tfilter: (creep: Creep) =>\r\n        // \t{\r\n        // \t\tvar creepMemory = creep.memory as CreepMemory;\r\n        // \t\treturn creepMemory.role === CreepRoles.ROLE_MINER;\r\n        // \t}\r\n        // });\r\n        // upgraders = room.find(FIND_MY_CREEPS, {\r\n        // \tfilter: (creep: Creep) =>\r\n        // \t{\r\n        // \t\tvar creepMemory = creep.memory as CreepMemory;\r\n        // \t\treturn creepMemory.role === CreepRoles.ROLE_UPGRADER;\r\n        // \t}\r\n        // });\r\n    };\r\n    RoomManager.prototype.getSpawns = function (room) {\r\n        return room.find(FIND_MY_STRUCTURES, {\r\n            filter: function (structure) {\r\n                if (structure.structureType == STRUCTURE_SPAWN) {\r\n                    var spawner = structure;\r\n                    return spawner.spawning === null;\r\n                }\r\n                return false;\r\n            }\r\n        });\r\n    };\r\n    RoomManager.prototype.spawnMissingCreeps = function (room) {\r\n        var _this = this;\r\n        var spawns = this.getSpawns(room);\r\n        var creepsNeeded = this.creeps_per_room - creeps.length;\r\n        if (creepsNeeded === 0)\r\n            return;\r\n        var creepsSpawned = 0;\r\n        _.each(spawns, function (spawn) {\r\n            if (creepsSpawned < creepsNeeded) {\r\n                var spawner = spawn;\r\n                if (spawner.spawning == undefined && creepsNeeded > 0) {\r\n                    console.log(\"need to spawn \" + creepsNeeded + \" creeps for room \" + room.name);\r\n                }\r\n                if (_this.trySpawnCreep(spawner, [WORK, MOVE, MOVE, CARRY], 12 /* ROLE_UPGRADER */)) {\r\n                    creepsSpawned++;\r\n                }\r\n            }\r\n        });\r\n    };\r\n    // private spawnMissingHarvesters(room: Room)\r\n    // {\r\n    // \tconst spawns = this.getSpawns(room);\r\n    // \tvar harvestersNeeded: number = this.harvesters_per_room - harvesters.length;\r\n    // \tif (harvestersNeeded === 0) return;\r\n    // \tvar harvestersSpawned: number = 0;\r\n    // \tif (harvestersNeeded > 0)\r\n    // \t{\r\n    // \t\tconsole.log(\"harvester count: \" + harvesters.length);\r\n    // \t\tconsole.log(\"need to spawn \" + harvestersNeeded + \" harvesters for room \" + room.name);\r\n    // \t}\r\n    // \t_.each(spawns, (spawn) =>\r\n    // \t{\r\n    // \t\tif (harvestersSpawned < harvestersNeeded)\r\n    // \t\t{\r\n    // \t\t\tvar spawner = spawn as StructureSpawn;\r\n    // \t\t\tif (this.trySpawnCreep(spawner, [WORK, MOVE, MOVE, CARRY], CreepRoles.ROLE_MINER))\r\n    // \t\t\t{\r\n    // \t\t\t\tharvestersSpawned++;\r\n    // \t\t\t}\r\n    // \t\t}\r\n    // \t})\r\n    // }\r\n    RoomManager.prototype.trySpawnCreep = function (spawn, bodyParts, role) {\r\n        var spawned = false;\r\n        if (!spawned) {\r\n            if (this.spawnCreep(spawn, bodyParts, role) === OK) {\r\n                spawned = true;\r\n            }\r\n        }\r\n        return spawned;\r\n    };\r\n    RoomManager.prototype.spawnCreep = function (spawn, bodyParts, role) {\r\n        var uuid = Memory.uuid;\r\n        var creepName = spawn.room.name + \"-\" + roleToString(role) + \"-\" + (uuid + 1);\r\n        var status = spawn.spawnCreep(bodyParts, creepName, { dryRun: true });\r\n        status = _.isString(status) ? OK : status;\r\n        if (status === OK) {\r\n            Memory.uuid = uuid + 1;\r\n            var creepName_1 = spawn.room.name + \"-\" + roleToString(role) + \"-\" + uuid;\r\n            var memory = {\r\n                idle: true,\r\n                moving: false,\r\n                building: false,\r\n                name: creepName_1,\r\n                gathering: false,\r\n                role: role,\r\n                roleString: roleToString(role),\r\n                isUpgradingController: false\r\n            };\r\n            // const properties: any = {\r\n            // \tmemory: memory,\r\n            // }\r\n            console.log(\"Started creating new creep: \" + creepName_1);\r\n            status = spawn.spawnCreep(bodyParts, creepName_1, { memory: memory });\r\n            return _.isString(status) ? OK : status;\r\n        }\r\n        else {\r\n            console.log(\"Coudldn't spawn: \" + Utils.errorToString(status));\r\n            // if (Config.ENABLE_DEBUG_MODE && status !== ERR_NOT_ENOUGH_ENERGY)\r\n            // {\r\n            // \tlog.info(\"Failed creating new creep: \" + status);\r\n            // }\r\n            return status;\r\n        }\r\n    };\r\n    return RoomManager;\r\n}());\r\nexport { RoomManager };\r\n//# sourceMappingURL=RoomManager.js.map","map":{"version":3,"file":"RoomManager.js","sourceRoot":"","sources":["src/RoomManager.ts"],"names":[],"mappings":"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"}}
