{"code":"import * as tslib_1 from \"tslib\";\r\nimport { CreepTask } from \"tasks/CreepTask\";\r\nvar UpgradeTask = /** @class */ (function (_super) {\r\n    tslib_1.__extends(UpgradeTask, _super);\r\n    function UpgradeTask() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        _this.name = \"UpgradeTask\";\r\n        _this.singular = true;\r\n        return _this;\r\n    }\r\n    UpgradeTask.prototype.doWork = function (creep, context) {\r\n        //console.log('upgrade task: do work')\r\n        var creepMem = creep.memory;\r\n        if (!creepMem.isUpgradingController) {\r\n            if (creep.carry.energy < creep.carryCapacity) {\r\n                creep.say('ðŸ”„ Harvest!');\r\n                var sources = creep.room.find(FIND_SOURCES);\r\n                if (creep.harvest(sources[0]) == ERR_NOT_IN_RANGE) {\r\n                    creep.moveTo(sources[0], { visualizePathStyle: { stroke: '#ffaa00' } });\r\n                }\r\n            }\r\n            else {\r\n                creepMem.isUpgradingController = true;\r\n            }\r\n        }\r\n        if (creepMem.isUpgradingController) {\r\n            creep.say('ðŸš§ Upgrade!');\r\n            if (creep.upgradeController(this.controller) == ERR_NOT_IN_RANGE) {\r\n                creep.moveTo(this.controller, { visualizePathStyle: { stroke: '#ffffff' } });\r\n            }\r\n            else if (creep.carry.energy == 0) {\r\n                this.finished = true;\r\n            }\r\n        }\r\n    };\r\n    UpgradeTask.prototype.start = function (creep, context) {\r\n        _super.prototype.start.call(this, creep, context);\r\n        var roomMem = this.room.memory;\r\n        roomMem.controllerBeingUpgraded = true;\r\n    };\r\n    UpgradeTask.prototype.finish = function (creep, context) {\r\n        _super.prototype.finish.call(this, creep, context);\r\n        var mem = creep.memory;\r\n        var roomMem = this.room.memory;\r\n        mem.isUpgradingController = false;\r\n        roomMem.controllerBeingUpgraded = false;\r\n        creep.say('ðŸš§ Finish!');\r\n    };\r\n    return UpgradeTask;\r\n}(CreepTask));\r\nexport { UpgradeTask };\r\n//# sourceMappingURL=UpgradeTask.js.map","map":{"version":3,"file":"UpgradeTask.js","sourceRoot":"","sources":["../src/tasks/UpgradeTask.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,SAAS,EAAC,MAAM,iBAAiB,CAAA;AAGzC;IAAiC,uCAAS;IAA1C;QAAA,qEA0DC;QAxDA,UAAI,GAAW,aAAa,CAAC;QAC7B,cAAQ,GAAY,IAAI,CAAC;;IAuD1B,CAAC;IArDU,4BAAM,GAAhB,UAAiB,KAAY,EAAE,OAAY;QAE1C,sCAAsC;QACtC,IAAI,QAAQ,GAAG,KAAK,CAAC,MAAqB,CAAC;QAC3C,IAAI,CAAC,QAAQ,CAAC,qBAAqB,EACnC;YACC,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,aAAa,EAC5C;gBACC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;gBACzB,IAAI,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAC5C,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,gBAAgB,EACjD;oBACC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,kBAAkB,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;iBACxE;aACD;iBAED;gBACC,QAAQ,CAAC,qBAAqB,GAAG,IAAI,CAAC;aACtC;SACD;QACD,IAAI,QAAQ,CAAC,qBAAqB,EAClC;YACC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;YACzB,IAAI,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,gBAAgB,EAChE;gBACC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,kBAAkB,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,CAAC,CAAC;aAC7E;iBACI,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,EAChC;gBACC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;aACrB;SACD;IACF,CAAC;IACD,2BAAK,GAAL,UAAM,KAAY,EAAE,OAAY;QAE/B,iBAAM,KAAK,YAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAC5B,IAAI,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,MAAoB,CAAC;QAC7C,OAAO,CAAC,uBAAuB,GAAG,IAAI,CAAC;IACxC,CAAC;IAED,4BAAM,GAAN,UAAO,KAAY,EAAE,OAAY;QAEhC,iBAAM,MAAM,YAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAC7B,IAAI,GAAG,GAAG,KAAK,CAAC,MAAqB,CAAC;QACtC,IAAI,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,MAAoB,CAAC;QAE7C,GAAG,CAAC,qBAAqB,GAAG,KAAK,CAAC;QAClC,OAAO,CAAC,uBAAuB,GAAG,KAAK,CAAC;QAGxC,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IACzB,CAAC;IAEF,kBAAC;AAAD,CAAC,AA1DD,CAAiC,SAAS,GA0DzC"}}
