{"code":"import { Queue } from \"utils/queue\";\r\nvar TaskQueue = /** @class */ (function () {\r\n    function TaskQueue() {\r\n        this._queue = new Queue();\r\n        this.runningTasks = [];\r\n    }\r\n    TaskQueue.prototype.clear = function () {\r\n        this._queue.clear();\r\n    };\r\n    TaskQueue.prototype.workingCount = function (name) {\r\n        if (name === void 0) { name = \"\"; }\r\n        var count = 0;\r\n        for (var value in this.runningTasks) {\r\n            var task = this.runningTasks[value];\r\n            if (task.name == name || name == \"\")\r\n                count++;\r\n        }\r\n        return count;\r\n    };\r\n    TaskQueue.prototype.length = function () {\r\n        return this._queue.length();\r\n    };\r\n    TaskQueue.prototype.addItem = function (roomID, queueItem) {\r\n        if (queueItem == undefined || queueItem == null)\r\n            return;\r\n        var total = this._queue.count(queueItem.name) + this.workingCount(queueItem.name);\r\n        if (total > queueItem.maxConcurrentCount)\r\n            return;\r\n        //var room = Game.getObjectById(roomID) as Room;\r\n        // console.log(`Adding new task to queue for room ${room.name}: ${queueItem.name}, total: ${total}`)\r\n        this._queue.push(queueItem);\r\n    };\r\n    TaskQueue.prototype.tasksBeingHandled = function () {\r\n        return this.runningTasks;\r\n    };\r\n    TaskQueue.prototype.waitingTasks = function () {\r\n        return this._queue;\r\n    };\r\n    TaskQueue.prototype.any = function () {\r\n        return this._queue.any();\r\n    };\r\n    TaskQueue.prototype.finish = function (task) {\r\n        var index = this.runningTasks.indexOf(task);\r\n        if (index > -1) {\r\n            this.runningTasks.splice(index, 1);\r\n        }\r\n    };\r\n    TaskQueue.prototype.startNext = function (creepID, context) {\r\n        if (this._queue.any() == false)\r\n            return;\r\n        var task = this._queue.pop();\r\n        if (task != undefined) {\r\n            task.start(creepID, context);\r\n            this.runningTasks.push(task);\r\n        }\r\n    };\r\n    return TaskQueue;\r\n}());\r\nexport { TaskQueue };\r\n//# sourceMappingURL=TaskQueue.js.map","map":{"version":3,"file":"TaskQueue.js","sourceRoot":"","sources":["../src/utils/TaskQueue.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,aAAa,CAAC;AAGpC;IAAA;QAES,WAAM,GAAa,IAAI,KAAK,EAAK,CAAC;QAElC,iBAAY,GAAQ,EAAE,CAAC;IA6DhC,CAAC;IA5DA,yBAAK,GAAL;QAEC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IACrB,CAAC;IACD,gCAAY,GAAZ,UAAa,IAAiB;QAAjB,qBAAA,EAAA,SAAiB;QAE7B,IAAI,KAAK,GAAW,CAAC,CAAC;QACtB,KAAK,IAAM,KAAK,IAAI,IAAI,CAAC,YAAY,EACrC;YACC,IAAI,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;YACpC,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;gBAAE,KAAK,EAAE,CAAC;SAC7C;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IACD,0BAAM,GAAN;QAEC,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;IAC7B,CAAC;IACD,2BAAO,GAAP,UAAQ,MAAc,EAAE,SAAY;QAEnC,IAAI,SAAS,IAAI,SAAS,IAAI,SAAS,IAAI,IAAI;YAAE,OAAO;QAExD,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAClF,IAAI,KAAK,GAAG,SAAS,CAAC,kBAAkB;YAAE,OAAO;QAEjD,gDAAgD;QAChD,oGAAoG;QACpG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC7B,CAAC;IACD,qCAAiB,GAAjB;QAEC,OAAO,IAAI,CAAC,YAAY,CAAC;IAC1B,CAAC;IACD,gCAAY,GAAZ;QAEC,OAAO,IAAI,CAAC,MAAM,CAAC;IACpB,CAAC;IACD,uBAAG,GAAH;QAEC,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;IAC1B,CAAC;IACD,0BAAM,GAAN,UAAO,IAAO;QAEb,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAI,KAAK,GAAG,CAAC,CAAC,EACd;YACC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;SACnC;IACF,CAAC;IACD,6BAAS,GAAT,UAAU,OAAe,EAAE,OAAY;QAEtC,IAAI,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,KAAK;YAAE,OAAO;QACvC,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,EAAO,CAAC;QAClC,IAAI,IAAI,IAAI,SAAS,EACrB;YACC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAC7B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC7B;IACF,CAAC;IAEF,gBAAC;AAAD,CAAC,AAjED,IAiEC"}}
