{"code":"import * as utils from \"utils/utils\";\r\n//import { Restock } from \"tasks/creep/Restock\";\r\n//import { Build } from \"tasks/creep/Build\";\r\n//import { Upgrade } from \"tasks/creep/Upgrade\";\r\nimport { CreepTaskQueue } from \"tasks/CreepTaskQueue\";\r\n// import { RepairTask } from \"tasks/creep/Repair\";\r\n//import { FillTower } from \"tasks/creep/FillTower\";\r\n//import { TowerRepair } from \"tasks/structure/TowerRepair\";\r\n//import { TowerAttack } from \"tasks/structure/TowerAttack\";\r\nimport { Mine } from \"tasks/creep/Mine\";\r\n//import { StructureTask } from \"tasks/StructureTask\";\r\n//import { StructureTaskRequest } from \"tasks/StructureTaskRequest\";\r\nimport { TaskStatus } from \"tasks/Task\";\r\nvar TaskManager = /** @class */ (function () {\r\n    function TaskManager() {\r\n    }\r\n    TaskManager.continueActiveRequests = function (roomName) {\r\n        var activeWorkerTasks = CreepTaskQueue.allActive(roomName);\r\n        console.log(Object.keys(activeWorkerTasks).length);\r\n        _.each(activeWorkerTasks, function (request) {\r\n            var roomMem = Game.rooms[roomName].memory;\r\n            if (request.name == \"Mine\") {\r\n                console.log(\"once\");\r\n                var task = new Mine(request);\r\n                task.run();\r\n                if (task.request.status == TaskStatus.FINISHED) {\r\n                    console.log(\"deleting!\");\r\n                    delete roomMem.activeWorkerRequests[request.assignedTo];\r\n                }\r\n            }\r\n            else {\r\n                console.log(request.name);\r\n            }\r\n            //if (Game.creeps[request.assignedTo] == undefined) request.status = TaskStatus.FINISHED;\r\n            //if (request.status == TaskStatus.FINISHED) {\r\n            //  delete activeWorkerTasks[assignedName];\r\n            //  return;\r\n            //}\r\n        });\r\n        for (var assignedName in activeWorkerTasks) {\r\n            //if (taskInfo.name == \"Restock\") (new Restock(taskInfo)).run();\r\n            //else if (taskInfo.name == \"Upgrade\") (new Upgrade(taskInfo)).run();\r\n            //else if (taskInfo.name == \"Build\") (new Build(taskInfo)).run();\r\n            //else if (taskInfo.name == \"Repair\") (new RepairTask(taskInfo), roomName).run()\r\n            //else if (taskInfo.name == \"FillTower\") (new FillTower(taskInfo)).run();\r\n            //else if (taskInfo.name == \"TransferEnergy\") (new TransferEnergy(taskInfo)).run();\r\n            //else if (taskInfo.name == \"PickupEnergy\") (new PickupEnergy(taskInfo)).run()\r\n        }\r\n        //let activeStructureTasks = StructureTaskQueue.allActive(roomName);\r\n        //for (let buildingID in activeStructureTasks)\r\n        //{\r\n        //\tlet structureTaskInfo = activeStructureTasks[buildingID];\r\n        //\tif (structureTaskInfo.assignedTo != buildingID) structureTaskInfo.assignedTo = buildingID;\r\n        //\tif (structureTaskInfo.name == \"TowerRepair\") (new TowerRepair(structureTaskInfo)).run();\r\n        //\tif (structureTaskInfo.name == \"TowerAttack\") (new TowerAttack(structureTaskInfo)).run();\r\n        //}\r\n    };\r\n    TaskManager.addBuildingTasks = function (roomName) {\r\n        //TowerAttack.addTask(roomName);\r\n        //TowerRepair.addTask(roomName);\r\n        //console.log(\"finished building tasks\")\r\n    };\r\n    TaskManager.addPendingRequests = function (roomName) {\r\n        //PickupEnergy.addRequests(roomName);\r\n        //Restock.addRequests(roomName);\r\n        Mine.addRequests(roomName);\r\n        //TransferEnergy.addRequests(roomName);\r\n        //FillTower.addRequests(roomName);\r\n        //Build.addRequests(roomName);\r\n        //Upgrade.addRequests(roomName);\r\n    };\r\n    TaskManager.Run = function (roomName) {\r\n        //this.addBuildingTasks(roomName);\r\n        this.continueActiveRequests(roomName);\r\n        this.addPendingRequests(roomName);\r\n        this.assignPendingRequests(roomName);\r\n    };\r\n    TaskManager.assignPendingRequests = function (roomName) {\r\n        //console.log(\"assignPendingTasks\");\r\n        var idleCreeps = utils.findIdleCreeps(roomName);\r\n        for (var id in idleCreeps) {\r\n            var creep = idleCreeps[id];\r\n            if (creep != undefined) {\r\n                var mem = creep.memory;\r\n                if (mem.role == 2 /* ROLE_MINER */) {\r\n                    console.log(\"found a miner: \" + creep.name);\r\n                    console.log(\"idle: \" + mem.idle);\r\n                }\r\n                if (mem.idle) {\r\n                    CreepTaskQueue.start(creep.name, roomName);\r\n                }\r\n            }\r\n        }\r\n        //let idleStructures = utils.findIdleSmartStructures(roomName);\r\n        //for (let id in idleStructures) {\r\n        //  let structure = idleStructures[id] as SmartStructure;\r\n        //  if (structure != undefined) {\r\n        //    let memory = structure.memory as StructureMemory;\r\n        //    if (memory.idle) {\r\n        //      StructureTaskQueue.startTask(structure.id, roomName);\r\n        //    }\r\n        //  }\r\n        //}\r\n        // let stillIdleCreeps = utils.findIdleCreeps(roomName);\r\n        // for (let id in stillIdleCreeps)\r\n        // {\r\n        // \tlet creep = stillIdleCreeps[id];\r\n        // \tlet m = creep.memory as CreepMemory\r\n        // \tcreep.moveTo(Game.getObjectById(m.spawnID) as StructureSpawn)\r\n        // }\r\n    };\r\n    return TaskManager;\r\n}());\r\nexport { TaskManager };\r\n//# sourceMappingURL=taskManager.js.map","map":{"version":3,"file":"taskManager.js","sourceRoot":"","sources":["src/taskManager.ts"],"names":[],"mappings":"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"}}
