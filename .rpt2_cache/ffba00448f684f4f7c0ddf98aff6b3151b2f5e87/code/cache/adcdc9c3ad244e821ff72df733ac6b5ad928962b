{"code":"var WorkerTaskQueue = /** @class */ (function () {\r\n    function WorkerTaskQueue() {\r\n    }\r\n    WorkerTaskQueue.totalCount = function (roomName, taskName) {\r\n        if (taskName === void 0) { taskName = \"\"; }\r\n        return WorkerTaskQueue.activeCount(roomName, taskName)\r\n            + WorkerTaskQueue.pendingCount(roomName, taskName);\r\n    };\r\n    WorkerTaskQueue.pendingCount = function (roomName, taskName) {\r\n        if (taskName === void 0) { taskName = \"\"; }\r\n        var roomMem = Game.rooms[roomName].memory;\r\n        if (taskName == \"\") {\r\n            return roomMem.activeTaskCount;\r\n        }\r\n        else {\r\n            var count = 0;\r\n            var tasks = roomMem.pendingWorkerTasks;\r\n            for (var id in tasks) {\r\n                var task = tasks[id];\r\n                if (task.name == taskName)\r\n                    count++;\r\n            }\r\n            return count;\r\n        }\r\n    };\r\n    WorkerTaskQueue.activeCount = function (roomName, taskName) {\r\n        if (taskName === void 0) { taskName = \"\"; }\r\n        var roomMem = Game.rooms[roomName].memory;\r\n        if (taskName == \"\") {\r\n            return roomMem.activeTaskCount;\r\n        }\r\n        else {\r\n            var count = 0;\r\n            var tasks = roomMem.activeWorkerTasks;\r\n            for (var task in tasks) {\r\n                var test = tasks[task];\r\n                if (test.name == taskName)\r\n                    count++;\r\n            }\r\n            return count;\r\n        }\r\n    };\r\n    WorkerTaskQueue.addPendingTask = function (taskInfo, roomName) {\r\n        var roomMem = Game.rooms[roomName].memory;\r\n        roomMem.pendingWorkerTasks.push(taskInfo);\r\n    };\r\n    WorkerTaskQueue.startNextTask = function (creepName, roomName) {\r\n        var roomMem = Game.rooms[roomName].memory;\r\n        if (roomMem.pendingWorkerTasks.length == 0)\r\n            return;\r\n        var nextTask = roomMem.pendingWorkerTasks.shift();\r\n        if (nextTask != undefined) {\r\n            nextTask.assignedCreepName = creepName;\r\n            roomMem.activeWorkerTasks[creepName] = nextTask;\r\n            roomMem.activeTaskCount++;\r\n        }\r\n    };\r\n    WorkerTaskQueue.finishTask = function (assignedCreepName, roomName) {\r\n        var roomMem = Game.rooms[roomName].memory;\r\n        delete roomMem.activeWorkerTasks[assignedCreepName];\r\n        roomMem.activeTaskCount--;\r\n    };\r\n    WorkerTaskQueue.allActiveTasks = function (roomName) {\r\n        var roomMem = Game.rooms[roomName].memory;\r\n        return roomMem.activeWorkerTasks;\r\n    };\r\n    WorkerTaskQueue.count = function (roomName) {\r\n        var roomMem = Game.rooms[roomName].memory;\r\n        return roomMem.pendingWorkerTasks.length + roomMem.activeTaskCount;\r\n    };\r\n    return WorkerTaskQueue;\r\n}());\r\nexport { WorkerTaskQueue };\r\n// export class TaskQueue<T extends ICreepTask>\r\n// {\r\n// \tprivate _waitingTasks: Queue<T> = new Queue<T>();\r\n// \tprivate _runningTasks: T[] = [];\r\n// \tall(): Array<T>\r\n// \t{\r\n// \t\treturn this._waitingTasks.toArray().concat(this._runningTasks);\r\n// \t}\r\n// \tclear(): any\r\n// \t{\r\n// \t\tthis._waitingTasks.clear();\r\n// \t\tthis._runningTasks = [];\r\n// \t}\r\n// \texistingTaskCount(name: string): number\r\n// \t{\r\n// \t\treturn this.runningCount(name) + this.waitingCount(name);\r\n// \t}\r\n// \trunningCount(name: string = \"\"): number\r\n// \t{\r\n// \t\tlet count: number = 0;\r\n// \t\tfor (const value in this._runningTasks)\r\n// \t\t{\r\n// \t\t\tvar task = this._runningTasks[value];\r\n// \t\t\tif (task.taskInfo.name == name || name == \"\") count++;\r\n// \t\t}\r\n// \t\treturn count;\r\n// \t}\r\n// \twaitingCount(name: string = \"\"): number\r\n// \t{\r\n// \t\tlet count: number = 0;\r\n// \t\tvar waiting = this._waitingTasks.toArray();\r\n// \t\tfor (const value in waiting)\r\n// \t\t{\r\n// \t\t\tvar task = waiting[value];\r\n// \t\t\tif (task.taskInfo.name == name || name == \"\")\r\n// \t\t\t{\r\n// \t\t\t\tcount++;\r\n// \t\t\t}\r\n// \t\t}\r\n// \t\treturn count;\r\n// \t}\r\n// \ttotalCount(): number\r\n// \t{\r\n// \t\treturn this.waitingCount() + this.runningCount();\r\n// \t}\r\n// \taddExisting(task: T)\r\n// \t{\r\n// \t\tthis._runningTasks.push(task);\r\n// \t}\r\n// \taddNewTask(task:T)\r\n// \t{\r\n// \t\tif (task == undefined || task == null) return;\r\n// \t\tthis._waitingTasks.push(task);\r\n// \t}\r\n// \trunningTasks(): Array<T>\r\n// \t{\r\n// \t\treturn this._runningTasks;\r\n// \t}\r\n// \twaitingTasks(): Array<T>\r\n// \t{\r\n// \t\treturn this._waitingTasks.toArray();\r\n// \t}\r\n// \tany(): boolean\r\n// \t{\r\n// \t\treturn this._waitingTasks.any();\r\n// \t}\r\n// \tremove(task: T): void\r\n// \t{\r\n// \t\tthis._runningTasks = this._runningTasks.filter(obj => obj !== task);\r\n// \t}\r\n// }\r\n//# sourceMappingURL=TaskQueue.js.map","map":{"version":3,"file":"TaskQueue.js","sourceRoot":"","sources":["../src/utils/TaskQueue.ts"],"names":[],"mappings":"AAGA;IAAA;IA+EA,CAAC;IA7EO,0BAAU,GAAjB,UAAkB,QAAgB,EAAE,QAAqB;QAArB,yBAAA,EAAA,aAAqB;QACxD,OAAO,eAAe,CAAC,WAAW,CAAC,QAAQ,EAAE,QAAQ,CAAC;cACpD,eAAe,CAAC,YAAY,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAA;IACnD,CAAC;IACM,4BAAY,GAAnB,UAAoB,QAAgB,EAAE,QAAqB;QAArB,yBAAA,EAAA,aAAqB;QAG1D,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,MAAoB,CAAC;QAExD,IAAG,QAAQ,IAAI,EAAE,EACjB;YACC,OAAO,OAAO,CAAC,eAAe,CAAC;SAC/B;aACG;YACH,IAAI,KAAK,GAAG,CAAC,CAAC;YACd,IAAI,KAAK,GAAG,OAAO,CAAC,kBAAkB,CAAC;YACvC,KAAI,IAAI,EAAE,IAAI,KAAK,EAAC;gBACnB,IAAI,IAAI,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC;gBACrB,IAAG,IAAI,CAAC,IAAI,IAAI,QAAQ;oBAAE,KAAK,EAAE,CAAC;aAClC;YACD,OAAO,KAAK,CAAC;SACb;IACF,CAAC;IACM,2BAAW,GAAlB,UAAmB,QAAgB,EAAE,QAAqB;QAArB,yBAAA,EAAA,aAAqB;QAEzD,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,MAAoB,CAAC;QACxD,IAAG,QAAQ,IAAI,EAAE,EACjB;YACC,OAAO,OAAO,CAAC,eAAe,CAAC;SAC/B;aACG;YACH,IAAI,KAAK,GAAG,CAAC,CAAC;YACd,IAAI,KAAK,GAAG,OAAO,CAAC,iBAAiB,CAAC;YACtC,KAAI,IAAI,IAAI,IAAI,KAAK,EAAC;gBACrB,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;gBACvB,IAAG,IAAI,CAAC,IAAI,IAAI,QAAQ;oBAAE,KAAK,EAAE,CAAC;aAClC;YACD,OAAO,KAAK,CAAC;SACb;IACF,CAAC;IAEM,8BAAc,GAArB,UAAsB,QAAwB,EAAE,QAAgB;QAE/D,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,MAAoB,CAAC;QACxD,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAE3C,CAAC;IACM,6BAAa,GAApB,UAAqB,SAAiB,EAAE,QAAgB;QAEvD,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,MAAoB,CAAC;QACxD,IAAG,OAAO,CAAC,kBAAkB,CAAC,MAAM,IAAI,CAAC;YAAE,OAAO;QAElD,IAAI,QAAQ,GAAG,OAAO,CAAC,kBAAkB,CAAC,KAAK,EAAE,CAAC;QAClD,IAAG,QAAQ,IAAI,SAAS,EACxB;YACC,QAAQ,CAAC,iBAAiB,GAAG,SAAS,CAAC;YACvC,OAAO,CAAC,iBAAiB,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAC;YAChD,OAAO,CAAC,eAAe,EAAE,CAAC;SAC1B;IACF,CAAC;IACM,0BAAU,GAAjB,UAAkB,iBAAyB,EAAE,QAAgB;QAE5D,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,MAAoB,CAAC;QACxD,OAAO,OAAO,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;QACpD,OAAO,CAAC,eAAe,EAAE,CAAC;IAC3B,CAAC;IACM,8BAAc,GAArB,UAAsB,QAAgB;QAErC,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,MAAoB,CAAC;QACxD,OAAO,OAAO,CAAC,iBAAwD,CAAC;IACzE,CAAC;IAEM,qBAAK,GAAZ,UAAa,QAAgB;QAE5B,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,MAAoB,CAAC;QACxD,OAAO,OAAO,CAAC,kBAAkB,CAAC,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC;IACpE,CAAC;IACF,sBAAC;AAAD,CAAC,AA/ED,IA+EC;;AACD,+CAA+C;AAC/C,IAAI;AACJ,qDAAqD;AACrD,oCAAoC;AAEpC,mBAAmB;AACnB,KAAK;AACL,oEAAoE;AACpE,KAAK;AACL,gBAAgB;AAChB,KAAK;AACL,gCAAgC;AAChC,6BAA6B;AAC7B,KAAK;AACL,2CAA2C;AAC3C,KAAK;AACL,8DAA8D;AAC9D,KAAK;AACL,2CAA2C;AAC3C,KAAK;AACL,2BAA2B;AAC3B,4CAA4C;AAC5C,MAAM;AACN,2CAA2C;AAC3C,4DAA4D;AAC5D,MAAM;AACN,kBAAkB;AAClB,KAAK;AAEL,2CAA2C;AAC3C,KAAK;AACL,2BAA2B;AAC3B,gDAAgD;AAEhD,iCAAiC;AACjC,MAAM;AACN,gCAAgC;AAChC,mDAAmD;AACnD,OAAO;AACP,eAAe;AACf,OAAO;AACP,MAAM;AACN,kBAAkB;AAClB,KAAK;AACL,wBAAwB;AACxB,KAAK;AACL,sDAAsD;AACtD,KAAK;AACL,wBAAwB;AACxB,KAAK;AACL,mCAAmC;AACnC,KAAK;AACL,sBAAsB;AACtB,KAAK;AACL,mDAAmD;AAEnD,mCAAmC;AACnC,KAAK;AAEL,4BAA4B;AAC5B,KAAK;AACL,+BAA+B;AAC/B,KAAK;AACL,4BAA4B;AAC5B,KAAK;AACL,yCAAyC;AACzC,KAAK;AACL,kBAAkB;AAClB,KAAK;AACL,qCAAqC;AACrC,KAAK;AACL,yBAAyB;AACzB,KAAK;AACL,yEAAyE;AACzE,KAAK;AAEL,IAAI"}}
